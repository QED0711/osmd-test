{"version":3,"sources":["audio/A_min9.wav","audio/C_major.wav","components/ControlPanel.js","js/displayHelpers.js","components/ScoreDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SCORES","url","results","aMinResults","audio","aMinAudio","cMajResults","indexTransform","cMajAudio","MOCK_STAGES","ControlPanel","selectedScore","setSelectedScore","gradedFeature","setGradedFeature","displayResults","setDisplayResults","assessmentPercentages","setAssessmentPercentages","useState","assessing","setAssessing","assessmentStage","setAssessmentStage","songTitle","useParams","console","log","handleAssessPerformanceClick","a","Promise","resolve","setTimeout","handleGradedFeatureSelection","feature","useEffect","assessmentStageInterval","setInterval","clearInterval","stage","className","controls","src","type","id","class","onClick","disabled","overall","toFixed","pitch","rhythm","fillNoteColor","note","color","cls","classList","value","querySelector","setAttribute","querySelectorAll","opensheetmusicdisplay","require","ScoreDisplay","xml","setXml","svg","setSvg","fetch","then","response","text","data","catch","err","osmd","OpenSheetMusicDisplay","xmlDoc","DOMParser","parseFromString","load","checkSVG","svgElements","document","forEach","svgElement","notes","length","passed","filter","r","assessment","window","__matchedNotes","i","style","width","margin","height","App","basename","process","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ba8b716.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/A_min9.cf9b03d2.wav\";","module.exports = __webpack_public_path__ + \"static/media/C_major.970b368f.wav\";","import React, {useEffect, useState} from 'react';\n\nimport aMinResults from '../results/A_min9.json'\nimport cMajResults from '../results/C_major.json'\n\nimport aMinAudio from '../audio/A_min9.wav'\nimport cMajAudio from '../audio/C_major.wav'\nimport { useParams } from 'react-router';\n\nconst SCORES = {\n    \"a_min\": {\n        url: \"https://raw.githubusercontent.com/QED0711/osmd-test/main/src/scores/a_minor9_noteflight.xml\",\n        results: aMinResults,\n        audio: aMinAudio\n    },\n    \"c_maj\": {\n        url: \"https://raw.githubusercontent.com/QED0711/osmd-test/feature/demo_results/src/scores/c_maj_noteflight.xml\",\n        results: cMajResults,\n        indexTransform: [0, 1, 2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 34, 35, 36, 38, 40, 41, 43, 45, 46, 47, 48],\n        audio: cMajAudio\n    }\n}\n\nconst MOCK_STAGES = [\n    \"Uploading\", \"Uploading\", \"Uploading\", \"Uploading\",\n    \"Formatting Submission\", \"Formatting Submission\",\n    \"Transcribing to MIDI\", \"Transcribing to MIDI\", \"Transcribing to MIDI\", \"Transcribing to MIDI\", \"Transcribing to MIDI\", \"Transcribing to MIDI\", \"Transcribing to MIDI\",\n    \"Formatting Results\", \"Formatting Results\",\n]\n\nconst ControlPanel = ({\n    selectedScore,\n    setSelectedScore,\n    gradedFeature,\n    setGradedFeature,\n    displayResults,\n    setDisplayResults,\n    assessmentPercentages,\n    setAssessmentPercentages\n}) => {\n\n    // STATE\n    const [assessing, setAssessing] = useState(false)\n    const [assessmentStage, setAssessmentStage] = useState(0)\n    const {songTitle} = useParams()\n    console.log({songTitle})\n\n    // EVENTS\n    const handleSongSelection = e => {\n        e.target.value && setSelectedScore(SCORES[e.target.value])\n        setGradedFeature(\"overview\")\n        setDisplayResults(false)\n    }\n\n    const handleAssessPerformanceClick = async () => {\n        setAssessing(true)\n        await new Promise(resolve => setTimeout(resolve, 15000))\n        setAssessing(false)\n        setDisplayResults(true)\n    }\n\n    const handleGradedFeatureSelection = feature => () => {\n        setGradedFeature(feature)\n    }\n\n    // ONLOAD\n    useEffect(() => {\n        if(assessing){\n            const assessmentStageInterval = setInterval(() => {\n                if(assessmentStage >= 15) {\n                    clearInterval(assessmentStageInterval);\n                    return;\n                }\n                setAssessmentStage(stage => stage + 1)\n            }, 1000)\n        }\n\n    }, [assessing])\n\n    useEffect(() => {\n        \n        if(!!songTitle && songTitle in SCORES){\n            setSelectedScore(SCORES[songTitle])\n            setGradedFeature(\"overview\")\n            setDisplayResults(true)\n        }\n    }, [songTitle])\n\n\n\n    return (\n        <div>\n\n            {/* <select id=\"example-select\" onChange={handleSongSelection}>\n                <option value={null}>Select a Song</option>\n                <option value=\"aMin\">A Minor 9</option>\n                <option value=\"cMaj\">C Major Pentatonic</option>\n            </select> */}\n\n            {\n                selectedScore\n                &&\n                <div className=\"sample-audio\">\n                    {/* <h2>Sample Audio</h2> */}\n                    <audio controls>\n                        <source src={selectedScore.audio} type=\"audio/wav\" />\n                    </audio>\n                </div>\n\n            }\n\n            <div id=\"assessment-panel\">\n                {\n                    assessing\n                    &&\n                    <h2 id=\"assessment-stage\">{MOCK_STAGES[assessmentStage]}...</h2>\n                }\n                {\n                    (selectedScore && !displayResults && !assessing)\n                    &&\n                    <button id=\"assessment-button\" class=\"selected\" onClick={handleAssessPerformanceClick} disabled={displayResults}>Assess Performance</button>\n                }\n\n                {\n                    (selectedScore && displayResults)\n                    &&\n                    <>\n\n                        <button className={`graded-feature-button ${gradedFeature === \"overview\" ? \"selected\" : \"\"}`} onClick={handleGradedFeatureSelection(\"overview\")}>\n                            Overview {(assessmentPercentages?.overall * 100).toFixed(2)}%\n                        </button>\n                        <button className={`graded-feature-button ${gradedFeature === \"pitch\" ? \"selected\" : \"\"}`} onClick={handleGradedFeatureSelection(\"pitch\")}>\n                            Pitch {(assessmentPercentages?.pitch * 100).toFixed(2)}%\n                        </button>\n                        <button className={`graded-feature-button ${gradedFeature === \"rhythm\" ? \"selected\" : \"\"}`} onClick={handleGradedFeatureSelection(\"rhythm\")}>\n                            Rhythm {(assessmentPercentages?.rhythm * 100).toFixed(2)}%\n                        </button>\n                    </>\n                }\n\n            </div>\n\n\n\n\n\n\n\n        </div>\n    )\n}\n\nexport default ControlPanel","export const fillNoteColor = (note, color) => {\n    const cls = note.classList.value;\n\n    if (cls === \"vf-notehead\") {\n        note.querySelector(\"path\").setAttribute(\"fill\", color)\n    } else if (cls === \"vf-tabnote\") {\n        for (let rect of note.querySelectorAll(\"rect\")) {\n            rect.setAttribute(\"fill\", color)\n        }\n    }\n}","import React, { useEffect, useState } from 'react';\nimport { fillNoteColor } from '../js/displayHelpers';\n\nconst opensheetmusicdisplay = require(\"opensheetmusicdisplay\")\n\nconst ScoreDisplay = ({\n    selectedScore,\n    gradedFeature,\n    displayResults,\n    setAssessmentPercentages\n}) => {\n\n    const [xml, setXml] = useState(null)\n    const [svg, setSvg] = useState(null)\n\n\n    // ON LOAD\n    useEffect(() => {\n\n\n        if (selectedScore) {\n            fetch(selectedScore.url)\n                .then(response => response.text())\n                .then(data => {\n                    setXml(data)\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n\n\n\n    }, [selectedScore])\n\n    useEffect(() => {\n\n        if (xml && selectedScore) {\n            const osmd = new opensheetmusicdisplay.OpenSheetMusicDisplay(\"sheetmusic\")\n\n            const parser = new DOMParser()\n            const xmlDoc = parser.parseFromString(xml, \"text/xml\")\n\n            osmd.load(xmlDoc)\n                .then(async () => {\n\n                    let svgElements;\n\n                    const checkSVG = setInterval(() => {\n                        svgElements = [...document.querySelectorAll(\"svg\")]\n                        if (svgElements) {\n                            clearInterval(checkSVG)\n                            setSvg(svgElements)\n                        }\n                    }, 50)\n                })\n        }\n\n    }, [xml, selectedScore])\n\n    useEffect(() => {\n\n        if(svg && displayResults){\n            svg.forEach(svgElement => {\n                const notes = svgElement.querySelectorAll(\".vf-tabnote, .vf-notehead\");\n                const results = selectedScore.results\n                const indexTransform = selectedScore.indexTransform\n\n                \n                console.log(results.length)\n                \n                const overall = selectedScore.results.filter(r => r.assessment.pitch && r.assessment.rhythm).length / results.length\n                const pitch = selectedScore.results.filter(r => r.assessment.pitch).length / results.length\n                const rhythm = selectedScore.results.filter(r => r.assessment.rhythm).length / results.length\n\n                setAssessmentPercentages({overall, pitch, rhythm})\n                \n                window.__matchedNotes = []\n                let note, cls, passed, choice;\n                results.forEach((r, i) => {\n\n                    note = indexTransform ? notes[indexTransform[i]] : notes[i]\n\n                    switch(gradedFeature){\n                        case \"overview\":\n                            passed = results[i]?.assessment?.pitch && results[i].assessment.rhythm\n                            break;\n                        case \"pitch\":\n                            passed = results[i]?.assessment?.pitch\n                            break;\n                        case \"rhythm\":\n                            passed = results[i]?.assessment?.rhythm\n                            break;\n                    }\n\n                    if (!passed) {\n                        fillNoteColor(note, \"red\")\n                    } else {\n                        fillNoteColor(note, \"black\")\n                    }\n                })\n            })\n        }\n\n    }, [gradedFeature, svg, displayResults])\n\n    return (\n\n        <div className=\"container\" style={{\n            width: \"95vw\",\n            margin: \"0 auto\"\n        }}>\n            <div id=\"sheetmusic\" style={{ height: \"auto\", width: \"95%\", margin: \"0 auto\" }}></div>\n\n        </div>\n    )\n}\n\nexport default ScoreDisplay;","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n\nimport cMaj from './results/C_major.json'\nimport aMin from './results/A_min9.json'\n\n\nimport './App.css';\n\nimport { TEST_XML } from \"./test\";\nimport { processXML } from './processXML';\nimport ControlPanel from './components/ControlPanel';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport AssessmentPanel from './components/AssessmentPanel';\n\nconst opensheetmusicdisplay = require(\"opensheetmusicdisplay\")\n\n\n// CONFIG\nconst C_MAJOR = \"https://raw.githubusercontent.com/QED0711/osmd-test/main/src/scores/c_maj_noteflight.xml\"\nconst A_MIN9 = \"https://raw.githubusercontent.com/QED0711/osmd-test/main/src/scores/a_minor9_noteflight.xml\"\n\n\n\nfunction App() {\n\n    const [xml, setXML] = useState(null)\n    const [svg, setSvg] = useState(null)\n    const [selectedScore, setSelectedScore] = useState(null)\n    const [displayResults, setDisplayResults] = useState(false)\n    const [gradedFeature, setGradedFeature] = useState(\"overview\")\n    const [assessmentPercentages, setAssessmentPercentages] = useState(null)\n\n\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path=\"/songs/:songTitle\">\n                <div className=\"App\">\n                    <ControlPanel {...{\n                        selectedScore,\n                        setSelectedScore,\n                        gradedFeature,\n                        setGradedFeature,\n                        displayResults,\n                        setDisplayResults,\n                        assessmentPercentages,\n                        setAssessmentPercentages\n                    }} />\n                    <ScoreDisplay {...{\n                        selectedScore,\n                        gradedFeature,\n                        displayResults,\n                        setAssessmentPercentages\n                    }} />\n                </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}